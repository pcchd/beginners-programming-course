* Lecture 1
** What we'll learn by the end of the course
  - Computational thinking

    Write small pieces of code that do useful things

  - Understand code written by others

    It is super useful to read code written by others

  - Understand our abilities and limit

  - Take description of a problem, and convert it into a programming problem

** Computation
- Declarative knowledge
  - Tells you *what* something is, not *how* to do it
  - Closest it gets is allow us to *test* it

  e.g
  #+BEGIN_EXAMPLE
  \sqrt{x} is a number ~y~ s.t y^2 = x and y != 0
  #+END_EXAMPLE

- Imperative knowledge
  - Tells us *how* to do something
  - A sequence of instructions to do something

  e.g
  #+BEGIN_EXAMPLE
  - Start with a guess ~g~
  - If g^2 = x, stop, return g
  - else g = (g + x/g) / 2
  - repeat
  #+END_EXAMPLE

- *computation* is about capturing the process of coming up with imperative process to do something

- A computation is based on a fixed set of primitives which are used to create complex computation
** Programming Language

- There is no best programming-language,
  but some languages are better at doing certain things than other languages

- Language used in this course is Python,
  but the course is not about Python. It is about how to program, Python is only a programming language
  choice and once we know how to code in one language (Python in our case), we can learn a new language
  easily

- Different dimensions of a language

  - _High vs Low level_

    Low level: Very close to hardware. Primitives are moving data from one location in memory to other
    High level: Much richer set of primitives

  - _General vs targeted_

    General: For general purpose programming. Can be used to do a /lot/ of things e.g Python
    Targeted: Designed for a specific purpose, e.g Maths (Matlab)

  - _Interpreted vs Compiled_

    Interpreted: Interpreter work directly on source-code at runtime
    Compiled: Compiler compiles code to intermediate form (Object Code) which actually runs finally

- Python is
  - High level
  - General Purpose
  - Interpreted

- *Syntax of a language*

  What are the legal expressions in this language

- *Static Semantics of a language*

  says which programs are meaningful i.e which expressions make sense

- *Semantics of a language*

  says what a program means, i.e what happens when the program runs
